name: Python Linting

on:
  push:
    branches: ["main", "develop"]
  pull_request:
    branches: ["main", "develop"]

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.13"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml', '**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --no-deps flake8 black isort mypy bandit
          if [ -f pyproject.toml ]; then pip install -e . --no-deps; fi
          if [ -f requirements.txt ]; then pip install -r requirements.txt --no-deps; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt --no-deps; fi

      - name: Run linting tools in parallel
        run: |
          # Run flake8 checks in parallel
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics &
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics &

          # Run other tools in parallel
          black --check --diff . &
          isort --check-only --diff . &
          mypy . --ignore-missing-imports --install-types --non-interactive &
          bandit -r . -f json -o bandit-report.json &

          # Wait for all background jobs to complete
          wait

      - name: Upload bandit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-report
          path: bandit-report.json
